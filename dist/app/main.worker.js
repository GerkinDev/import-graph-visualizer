(()=>{"use strict";(()=>{const e=self;e.addEventListener("message",(n=>{e.postMessage(function(e){const{moduleDeps:n,sourceModules:s,targetModules:i,ignoredModules:d}=e;if(n.modules=Object.fromEntries(Object.entries(n.modules).filter((([e,t])=>!d.includes(t.path)))),0===s.length){const{vertices:e,edges:r}=o(i,(e=>{var t,o;return null!==(o=null===(t=n.importedBy[e])||void 0===t?void 0:t.map((({path:e})=>e)))&&void 0!==o?o:[]}));return{modules:e.map((e=>n.modules[e])).filter(t),imports:r.map((({from:e,to:t})=>{var o,r;return{fromPath:e,toPath:t,isDynamic:null!==(r=null===(o=n.importedBy[e].find((({path:e})=>e===t)))||void 0===o?void 0:o.isDynamic)&&void 0!==r&&r}}))}}if(0===i.length){const{vertices:e,edges:r}=o(s,(e=>{var t,o;return null!==(o=null===(t=n.deps[e])||void 0===t?void 0:t.map((({path:e})=>e)))&&void 0!==o?o:[]}));return{modules:e.map((e=>n.modules[e])).filter(t),imports:r.map((({from:e,to:t})=>{var o,r;return{fromPath:e,toPath:t,isDynamic:null!==(r=null===(o=n.deps[e].find((({path:e})=>e===t)))||void 0===o?void 0:o.isDynamic)&&void 0!==r&&r}}))}}const a=function(e,t,o){const n=new Set(t),s=e=>n.has(e),i=[];for(const t of e)r(t,s,o,new Set,[],i);return i}(i,s,(e=>{var t,o;return null!==(o=null===(t=n.importedBy[e])||void 0===t?void 0:t.map((({path:e})=>e)))&&void 0!==o?o:[]})),l=new Set;return a.forEach((e=>{e.forEach((e=>{l.add(e)}))})),{modules:Array.from(l).map((e=>n.modules[e])).filter(t),imports:Array.from(l).reduce(((e,t)=>{var o,r;return[...e,...null!==(r=null===(o=n.importedBy[t])||void 0===o?void 0:o.filter((({path:e})=>l.has(e))).map((({path:e,isDynamic:o})=>({fromPath:e,toPath:t,isDynamic:o}))))&&void 0!==r?r:[]]}),[])}}(n.data))}));const t=e=>null!=e;function o(e,t){const o=e,r=new Set(e),n=[],s=[];for(;o.length>0;){const e=o.shift();n.push(e);for(const n of t(e))s.push({from:e,to:n}),r.has(n)||(o.push(n),r.add(n))}return{vertices:n,edges:s}}function r(e,t,o,n,s,i){if(n.add(e),s.push(e),t(e))i.push([...s]);else for(const d of o(e))n.has(d)||r(d,t,o,n,s,i);n.delete(e),s.pop()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,